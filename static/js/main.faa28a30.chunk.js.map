{"version":3,"sources":["GameField/components/Form/Form.js","GameField/components/Table/Td/Td.js","helpers/changeMode.js","helpers/getRandomInt.js","helpers/chunckArray.js","helpers/createPlaseholderTable.js","helpers/getCurrentData.js","helpers/fetchData.js","GameField/components/Table/Table.js","GameField/components/Counter/Counter.js","GameField/components/Modal/Modal.js","GameField/GameField.js","WinnersBoard/components/ItemWinner.js","WinnersBoard/WinnersBoard.js","App.js","index.js"],"names":["Form","props","complexity","handleChangeMode","playerName","handleChangeName","handleSubmit","play","className","id","onSubmit","event","value","onChange","hidden","type","placeholder","Td","useTds","addPoint","cliked","background","indexOf","slice","length","includes","onClick","children","changeMode","gameModes","gameMode","easyMode","normalMode","hardMode","getRandomInt","max","Math","floor","random","chunckArray","arr","chunkSize","index","arrlength","tempArr","myChynk","push","key","uuid","createPlaseholderTable","number","table","i","tr","j","getCurrentDate","d","Date","currMinuts","getMinutes","currHours","getHours","getDate","getMonth","getFullYear","URL","getData","target","fetch","then","response","json","Table","htmlTable","arrWithTd","map","el","field","Counter","pointsComputer","pointsPlayer","pointForWinn","Modal","winner","form","GameField","setState","getPointForWinn","point","pow","restarGame","disabled","chooseTd","isEmptyForm","state","isWarnning","createTable","startGame","preventDefault","interval","setInterval","chooseItem","addPointComputer","getWinner","delay","maxInt","useTd","concat","clearInterval","points","Id","isWinner","date","console","log","content","method","headers","body","JSON","stringify","fetchWinner","this","React","Component","ItemWinner","WinnersBoard","winners","App","isLoaded","getGameModes","getWinners","reversWiners","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.faa28a30.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.css';\nfunction Form(props) {\n  let {\n    complexity,\n    handleChangeMode,\n    playerName,\n    handleChangeName,\n    handleSubmit,\n    play\n  } = props;\n\n  return (\n    <form\n      className=\"game_field__form\"\n      id=\"inputSettings\"\n      onSubmit={event => {\n        handleSubmit(event);\n      }}\n    >\n      <select\n        className=\"form_format\"\n        value={complexity}\n        onChange={event => {\n          handleChangeMode(event);\n        }}\n      >\n        <option value=\"\" hidden>\n          {' '}\n          Pick game mode{' '}\n        </option>\n        <option value=\"easy\">Easy Mode</option>\n        <option value=\"normal\">Normal Mode</option>\n        <option value=\"hard\">Hard Mode</option>\n      </select>\n      <input\n        className=\"form_format\"\n        type=\"text\"\n        value={playerName}\n        onChange={event => {\n          handleChangeName(event);\n        }}\n        placeholder=\"Enter your name\"\n      ></input>\n      {play ? (\n        <button className=\"form_button  restar_button form_format\">\n          {' '}\n          Restar game{' '}\n        </button>\n      ) : (\n        <button className=\"form_button form_format\"> play </button>\n      )}\n    </form>\n  );\n}\n\nexport default Form;\n","import React from 'react';\nimport './Td.css';\n\nfunction Td(props) {\n  let { id, useTds, addPoint, cliked } = props;\n  let background = useTds.indexOf(id) !== -1 ? 'choose_td' : null;\n  let usedTds = useTds.slice(0, useTds.length - 1);\n\n  if (usedTds.includes(id)) background = 'computer_td';\n  if (cliked.includes(id)) background = 'player_td';\n\n  return (\n    <>\n      <td\n        id={id}\n        className={background}\n        onClick={event => {\n          addPoint(event);\n        }}\n      >\n        {props.children}\n      </td>\n    </>\n  );\n}\n\nexport default Td;\n","function changeMode(complexity, gameModes) {\n  let gameMode = {};\n\n  switch (complexity) {\n    case 'easy':\n      gameMode = gameModes.easyMode;\n      break;\n    case 'normal':\n      gameMode = gameModes.normalMode;\n      break;\n    case 'hard':\n      gameMode = gameModes.hardMode;\n      break;\n    default:\n      gameMode = gameModes.easyMode;\n  }\n\n  return gameMode;\n}\n\nexport default changeMode;\n","function getRandomInt(max) {\n  return Math.floor(Math.random() * Math.floor(max));\n}\n\nexport default getRandomInt;\n","import React from 'react';\nimport uuid from 'uuid/v4';\n\nfunction chunckArray(arr, chunkSize) {\n  let index = 0;\n  let arrlength = arr.length;\n  let tempArr = [];\n\n  for (index = 0; index < arrlength; index += chunkSize) {\n    let myChynk = arr.slice(index, index + chunkSize);\n    tempArr.push(<tr key={uuid()}>{myChynk}</tr>);\n  }\n\n  return tempArr;\n}\n\nexport default chunckArray;\n","import React from 'react';\nimport uuid from 'uuid/v4';\n\nfunction createPlaseholderTable(number) {\n  const table = [];\n  let id = 0;\n  for (let i = 0; i < number; i++) {\n    let tr = [];\n    for (let j = 0; j < number; j++) {\n      tr.push(<td key={id}></td>);\n      id++;\n    }\n    table.push(<tr key={uuid()}>{tr}</tr>);\n  }\n\n  return (\n    <table>\n      <tbody>{table}</tbody>\n    </table>\n  );\n}\n\nexport default createPlaseholderTable;\n","function getCurrentDate() {\n  let d = new Date();\n\n  let months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n  let currMinuts = `${\n    d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes()\n  }`;\n  let currHours = `${d.getHours() < 10 ? '0' + d.getHours() : d.getHours()}`;\n  let currDate = `${currHours}:${currMinuts}; ${d.getDate()} ${\n    months[d.getMonth()]\n  } ${d.getFullYear()}`;\n  return currDate;\n}\n\nexport default getCurrentDate;\n","import getCurrentDate from './getCurrentData';\n\nconst URL = 'https://starnavi-frontend-test-task.herokuapp.com';\n\nfunction getData(target) {\n  return fetch(URL + target).then(response => response.json());\n}\n\nfunction fetchWinner(winner) {\n  let date = getCurrentDate();\n  console.log('rr');\n  let content = {\n    date: date,\n    winner: winner\n  };\n\n  fetch(URL + '/winners', {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(content)\n  });\n}\n\nexport { getData, fetchWinner };\n","import React from 'react';\nimport uuid from 'uuid/v4';\nimport Td from './Td/Td';\nimport { chunckArray, createPlaseholderTable } from '../../../helpers';\nimport './Table.css';\n\nfunction Table(props) {\n  const { gameMode, play, table, useTds, cliked, addPoint } = props;\n  let htmlTable = [];\n\n  if (play) {\n    let arrWithTd = table.map((el, index) => {\n      return (\n        <Td\n          key={uuid()}\n          id={index}\n          useTds={useTds}\n          cliked={cliked}\n          addPoint={addPoint}\n        >\n          {el}\n        </Td>\n      );\n    });\n\n    htmlTable = chunckArray(arrWithTd, gameMode.field);\n  }\n\n  return (\n    <div className=\"game_field__table\">\n      {play ? (\n        <table>\n          <tbody>{htmlTable}</tbody>\n        </table>\n      ) : (\n        createPlaseholderTable(gameMode.field)\n      )}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from 'react';\nimport './Counter.css';\n\nfunction Counter(props) {\n  let { pointsComputer, pointsPlayer, pointForWinn } = props;\n\n  return (\n    <div className=\"game_field__counter\">\n      <p className=\"counter__points_for_win\">\n        You need to score more {pointForWinn} to win!\n      </p>\n      <div className=\"conter__curr_points\">\n        <p>Player: {pointsPlayer}</p>\n        <p>Computer: {pointsComputer}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Counter;\n","import React from 'react';\nimport './Modal.css';\n\nfunction Modal(props) {\n  let { winner } = props;\n\n  return (\n    <div className=\"game_field__modal\">\n      <div className=\"modal__alert\">{winner} win!</div>\n      <button className=\"modal_button\" form=\"inputSettings\">\n        Restar game\n      </button>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React from 'react';\nimport Form from './components/Form/Form';\nimport Table from './components/Table/Table';\nimport Counter from './components/Counter/Counter';\nimport Modal from './components/Modal/Modal';\nimport { changeMode, getRandomInt, fetchWinner } from '../helpers';\nimport './GameField.css';\n\nclass GameField extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      complexity: '',\n      gameMode: this.props.gameModes.easyMode,\n      play: false,\n      playerName: '',\n      table: [],\n      isWarnning: false,\n      chooseTd: null,\n      useTds: [],\n      cliked: [],\n      pointsComputer: 0,\n      pointsPlayer: 0,\n      winner: ''\n    };\n  }\n\n  handleChangeMode = event => {\n    let { gameModes } = this.props;\n    let gameMode = changeMode(event.target.value, gameModes);\n\n    this.setState({ complexity: event.target.value, gameMode: gameMode });\n  };\n\n  handleChangeName = event => {\n    this.setState({ playerName: event.target.value });\n  };\n\n  getPointForWinn = number => {\n    let point = Math.floor(Math.pow(number, 2) / 2) + 1;\n\n    this.setState({ pointForWinn: point });\n  };\n\n  restarGame = el => {\n    el[0].disabled = false;\n    el[1].disabled = false;\n    this.setState({\n      play: false,\n      chooseTd: null,\n      useTds: [],\n      table: [],\n      cliked: [],\n      pointsComputer: 0,\n      pointsPlayer: 0,\n      winner: ''\n    });\n  };\n\n  isEmptyForm = el => {\n    let { complexity, playerName } = this.state;\n    if (complexity && playerName) {\n      el[0].disabled = true;\n      el[1].disabled = true;\n      this.setState({ play: true, isWarnning: false });\n    } else {\n      this.setState({ isWarnning: true });\n    }\n  };\n\n  handleSubmit = event => {\n    let { winner, gameMode } = this.state;\n\n    this.getPointForWinn(gameMode.field);\n    this.isEmptyForm(event.target);\n    this.createTable();\n    if (this.state.play) this.restarGame(event.target);\n    this.startGame();\n\n    if (!winner) event.preventDefault();\n  };\n\n  startGame = () => {\n    let { gameMode } = this.state;\n\n    let interval = setInterval(() => {\n      this.chooseItem(interval);\n      this.addPointComputer();\n      this.getWinner(interval);\n    }, gameMode.delay);\n  };\n\n  createTable = () => {\n    let field = this.state.gameMode.field;\n    const table = [];\n\n    for (let i = 0; i < Math.pow(field, 2); i++) {\n      table.push('');\n    }\n\n    this.setState({ table });\n  };\n\n  chooseItem = interval => {\n    let { gameMode, useTds, play, chooseTd } = this.state;\n    let maxInt = Math.pow(gameMode.field, 2);\n\n    this.setState(() => {\n      let useTd = getRandomInt(maxInt);\n\n      if (useTds.length === maxInt) {\n        return { chooseTd: null, useTds: useTds.concat(null) };\n      }\n\n      for (let i = 0; i < maxInt; i++) {\n        if (useTds.length === maxInt) return;\n        if (useTds.includes(useTd)) {\n          useTd = getRandomInt(maxInt);\n          continue;\n        }\n        useTds = useTds.concat(useTd);\n        break;\n      }\n\n      if ((useTds.length === maxInt + 1 && !chooseTd) || !play) {\n        return clearInterval(interval);\n      }\n\n      return {\n        chooseTd: useTd,\n        useTds\n      };\n    });\n  };\n\n  addPointComputer = () => {\n    let { useTds, cliked } = this.state;\n    let points = useTds.length - cliked.length - 1;\n    if (points > -1) this.setState({ pointsComputer: points });\n  };\n\n  addPoint = event => {\n    let { pointsPlayer, cliked, chooseTd } = this.state;\n    let Id = +event.target.id;\n\n    if (cliked[cliked.length - 1] === Id) return;\n    if (chooseTd === Id) {\n      cliked = cliked.concat(Id);\n      pointsPlayer += 1;\n      this.setState({ pointsPlayer: pointsPlayer, cliked: cliked });\n    }\n  };\n\n  getWinner = interval => {\n    let { pointsComputer, pointsPlayer, pointForWinn } = this.state;\n    let isWinner;\n\n    if (pointsComputer >= pointForWinn) {\n      isWinner = 'Computer';\n    } else if ((pointsPlayer === pointsComputer) === pointForWinn) {\n      isWinner = 'A draw';\n    } else if (pointsPlayer >= pointForWinn) {\n      isWinner = 'Player';\n    }\n\n    this.setState({ winner: isWinner });\n\n    if (isWinner) {\n      fetchWinner(isWinner);\n      clearInterval(interval);\n    }\n  };\n\n  render() {\n    let {\n      useTds,\n      chooseTd,\n      gameMode,\n      complexity,\n      playerName,\n      pointForWinn,\n      play,\n      isWarnning,\n      table,\n      cliked,\n      pointsComputer,\n      pointsPlayer,\n      winner\n    } = this.state;\n\n    return (\n      <div className=\"game_field\">\n        <Form\n          complexity={complexity}\n          playerName={playerName}\n          play={play}\n          handleChangeMode={this.handleChangeMode}\n          handleChangeName={this.handleChangeName}\n          handleSubmit={this.handleSubmit}\n        />\n\n        {isWarnning && (\n          <p className=\"game_field__warning\">\n            Pleas, put your name and choose mode game!\n          </p>\n        )}\n\n        {winner && <Modal winner={winner} />}\n\n        {play && (\n          <Counter\n            pointsComputer={pointsComputer}\n            pointsPlayer={pointsPlayer}\n            pointForWinn={pointForWinn}\n          />\n        )}\n\n        <Table\n          gameMode={gameMode}\n          pointForWinn={pointForWinn}\n          play={play}\n          table={table}\n          chooseTd={chooseTd}\n          useTds={useTds}\n          addPoint={this.addPoint}\n          cliked={cliked}\n          pointsComputer={pointsComputer}\n          pointsPlayer={pointsPlayer}\n        />\n      </div>\n    );\n  }\n}\n\nexport default GameField;\n","import React from 'react';\nimport './ItemWinner.css';\n\nfunction ItemWinner(props) {\n  let { winner, date } = props;\n  return (\n    <li className=\"winner_board__item\">\n      {' '}\n      <span>{winner}:</span>\n      <span>{date}</span>\n    </li>\n  );\n}\n\nexport default ItemWinner;\n","import React from 'react';\nimport ItemWinner from './components/ItemWinner';\nimport './WinnersBoard.css';\n\nfunction WinnersBoard(props) {\n  let { winners } = props;\n  return (\n    <div className=\"winners_board\">\n      <h1 className=\"title\">Winners Board</h1>\n      <ul className=\"winners_board__list\">\n        {winners.map(winner => (\n          <ItemWinner\n            key={winner.id}\n            winner={winner.winner}\n            date={winner.date}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default WinnersBoard;\n","import React from 'react';\nimport GameField from './GameField/GameField';\nimport WinnersBoard from './WinnersBoard/WinnersBoard';\nimport { getData } from './helpers';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      winners: [],\n      gameModes: {},\n      isLoaded: false\n    };\n  }\n\n  async componentDidMount() {\n    let getGameModes = await getData('/game-settings');\n    let getWinners = await getData('/winners');\n    let reversWiners = getWinners.reverse();\n\n    this.setState({\n      gameModes: getGameModes,\n      winners: reversWiners,\n      isLoaded: true\n    });\n  }\n\n  render() {\n    let { winners, gameModes, isLoaded } = this.state;\n\n    if (isLoaded) {\n      return (\n        <div className=\"App\">\n          <GameField gameModes={gameModes} />\n          <WinnersBoard winners={winners} />\n        </div>\n      );\n    }\n    return (\n      <div>\n        <h1>Loading... </h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}